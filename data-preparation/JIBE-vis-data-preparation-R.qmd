---
title: "JIBE Melbourne Mode Choice Preparation and Analysis"
format: gfm
execute:
  # no data is to be included in this document, unless intentionally over-ridden
  output: false 
knitr:
  opts_chunk: 
    collapse: true
---

# JIBE-Vis data preparation

The JIBE-Vis project (aka VicHealth-Viz) aims to make the [Joining Impact models of transport
with spatial measures of the Built Environment (JIBE) project](https://jibeproject.com) modelling outputs accessible and useful for stakeholders, both in Melbourne and Manchester.  More broadly, the proposed platform (https://transporthealthimpacts.org) is intended to serve as an ongoing outlet for data stories illustrating the health impacts of transport planning scenarios.

This [Quarto](https://quarto.org/) markdown document will be used to record additional data processing undertaken using JIBE modelling outputs and additional external data for inclusion in the [Transport Health Impacts](https://transporthealthimpacts.org) data platform.

## Background

Through the JIBE project (Joining Impact models of transport with spatial measures of the Built Environment) and the associated [AToM project](https://doi.org/10.1080/15472450.2024.2372894) ( Activity-based and agent-based Transport model of Melbourne), we have developed agent-based transport simulation models (ABMs) capable of depicting complex urban systems. These ABMs model how street-level built environment exposures influence behaviour, accessibility and health with high spatial and demographic granularity. By forecasting travel itineraries, behaviours, exposures, and health for a synthetic population of individuals, these ABMs allow us to simulate scenarios of interest to health and transport planners. However, the complexity of the models and their extensive, detailed outputs can be a barrier to effective knowledge translation and therefore impact.

This web site provides illustrative examples of potential functionality that we could implement in an interactive tool to make transport and health modelling results from JIBE and similar projects accessible and useful. Through our engagement with stakeholders, we will incorporate and test new functionality that can help meet their needs and achieve this goal. The website is being developed as open source software on [GitHub](https://github.com/jibeproject/jibe-vis).

The approach to complex systems modelling undertaken in the JIBE project is illustrated in the following diagram:
![JIBE model diagram](https://github.com/jibeproject/jibe-vis/blob/main/diagrams/jibe-model-diagram.png?raw=true)
 
### Aims
We plan to engage government and advocacy stakeholders and researchers to co-develop an interactive platform with two related aims:

1. To make complex urban systems modelling evidence accessible and useful for informing healthy transport planning policy and localised infrastructure interventions; and
2. Support visualising the impacts of modelled transportation scenarios.

We plan to publish the methods and visualisation platform developed through this work as open source code that can be adapted by other researchers and practitioners for new settings for translation of research evidence into practice.
 
## JIBE outputs

The JIBE outputs are stored in a shared sharepoint/Teams folder ([JIBE working group](https://rmiteduau.sharepoint.com/:f:/r/sites/JIBEworkinggroup/Shared%20Documents/General?csf=1&web=1&e=xxdKd0)) that contains the following sub-folders:

- documentation
  - a spreadsheet for documenting outputs and their documentation
- manchester
  - documentation and outputs relating to the Manchester modelling components:
    - accessibility
    - airPollutant
    - health
    - MATSim
    - network
    - noise
    - physicalActivity
    - skims
    - synPop
- melbourne
  - documentation and outputs relating to the Melbourne modelling components
    - 20min_interventions
    - addresses
    - cycling_intervention
    - dem
    - freight
    - gtfs
    - health
    - injuries
    - network
    - noise
    - osm
    - poi
    - regions
    - synthetic_population
- visualisation
  - documentation and outputs related to the JIBE visualisation research translation project component, including this notebook and a copy of the Transport Health Impacts website code (a NodeJS typescript website, authored using the React framework).  Because of challenges with syncing and building/rebuilding NodeJS libraries, the actual development is occurring in an offline folder.  This folder contains a copy of the code repository https://github.com/jibeproject/jibe-vis.  The app itself is deployed upon successful code pushes to GitHub using AWS Amplify, at https://transporthealthimpacts.org.
  - This notebook is now being commenced as a refinement of seperate OneNote records, and will also record future planned data preparation drawing on data located in the above mentioned folders.

## Pre-requisites
Code was authored using [R](https://cloud.r-project.org/) 4.4.1 and [Positron 2024.10.0-14](https://github.com/posit-dev/positron/releases/tag/2024.10.0-14) IDE.

No data or data-related outputs will be included in this document or repository. By default, output is set to False. For non-sensitive aspects, e.g. displaying the sessionInfo() after running analysis, this may be over-ridden.

## Status

14 October 2024: commenced, in progress

## System environment set up
Project dependencies are described in the [`renv.lock`](./renv.lock)
file; see [renv](https://rstudio.github.io/renv/) for more information.
Instructions on installing dependencies using an `renv` lock file are
[here](https://rstudio.github.io/renv/articles/renv.html#installing-packages).

With `renv` installed, dependencies were installed by running:

```
renv::install(c('conflicted','fastDummies','janitor','knitr','tidyverse','sf','dplyr'))
```

```{r}
rm(list = ls()) # clear memory
library(conflicted) # package conflict handling https://stackoverflow.com/a/75058976
library(janitor) # data cleaning
library(knitr) # presentation
library(tidyverse) # data handling
library(fastDummies) # binary dummy variable utility
library(sf) # for coordinate reference transformation
library(dplyr)

conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
```

## Data sources

Initialising `data` object which will contain descriptions of the data used for modelling and representing aspects each of Manchester and Melbourne.

```{r}
data <- list(Manchester = list(), Melbourne = list(), Munich = list())
```

Setting up area geometries for summarising outputs
```{r}
data$Manchester[["areas"]] <- list()

# Output areas (id = 'JIBE OA linkage code' --- but only for linkage, doesn't need to be retained following this, so not listed below)
data$Manchester$areas[["OA"]] = list(
  source="manchester/synPop/sp_2021/OA_2021_MCR.shp",
  description = "Output Areas (2021)",
  variable = list(
    OA21CD = 'Output Area 2021 code',
    LSOA21CD = 'LSOA 2011 code',
    LSOA21NM = 'LSOA 2011 name'
  )
)

data$Manchester$areas[["LSOA"]] = list(
  source="manchester/synPop/sp_2019/LSOA_studyArea.shp",
  description = "Lower layer Super Output Areas (2011)",
  variable = list(
    LSOA11CD = 'LSOA 2011 code',
    LSOA11NM = 'LSOA 2011 name',
    LONG_ = 'Longitude',
    LAT = 'latitude'
  )
)
```

Setting up the network (pending data)
```{r}
data$Manchester[["network"]] <- list(
  source=""
)
```

## Synthetic population
```{r}
data$Manchester[["population"]] <- list()
```

### Persons
```{r}
data$Manchester$population[["persons"]] <- list(
  source = "manchester/synpop/sp_2021/pp_health_2021.csv",
  description = "A generated representation of Greater Manchester's population characteristics, risks and outcomes (synthetic population).",
  citation = "?",
  variables = list(
    id = "person id",
    hhid = "household id",
    age = "in years",
    gender = "male (1), female (2)",
    relationship = "role within the household",
    occupation = "toddler (0), student (3), employed (1), unemployed (2), retiree (4)",
    driversLicense = "true or false",
    workplace = "job id (0 if person is not employed)",
    income = "in £",
    disability = "Disability status (?)",
    schoolId = "N/A (unless we present flow models)",
    totalTravelTime_sec = "Travel time to…",
    totalActivityTime_min = "Moderate/vigorous physical activity (?; mins)",
    totalTimeAtHome_min = "Time spend at home (mins)",
    lightInjuryRisk = "?",
    severeInjuryRisk = "?",
    fatalityRisk = "?",
    mmetHr_walk = "marginal metabolic equivalent task hours per week (mMET-h/wk) 1 ",
    mmetHr_cycle = "mMET (h/wk)",
    exposure_pm25 = "Exclude ?",
    exposure_no2 = "Exclude ?",
    exposure_normalised_pm25 = "PM2.5 exposure (µg/m3?) 2",
    exposure_normalised_no2 = "NO2 exposure (µg/m3?) 3",
    rr_walk = "Relative risk of injury when taking a walking trip?",
    rr_cycle = "Relative risk of injury when taking a cycling trip?",
    rr_pm25 = "Relative risk of injury per cubic metre exposure to …",
    rr_no2 = "Relative risk of injury per cubic metre exposure to …",
    rr_all = "?"
  )
)
```

### Households
Dwelling ID (dwelling) and Household ID (id; omitted) appear identical (assert id==dwelling)
```{r}
data$Manchester$population[["households"]] <- list(
  source = "manchester/synpop/sp_2021/hh_2021.csv",
  description = "A generated representation of Greater Manchester household characteristics, risks and outcomes (synthetic population).",
  citation = "?",
  variables = list(
    id = "Household id",
    zone = "Output Area",
    hhSize = "Number of persons in household",
    autos = "Number of cars in household (0, 1, 2, >3)"
  )
)
```

### Dwellings
As per investigation further below, dwelling ID are household ID are identical in households dataset, but not in this data (assert id==hhID).  To link with households, hhID must be used.  Will omit dwelling coordinates from merged data.
```{r}
data$Manchester$population[["dwellings"]] <- list(
  source = "manchester/synpop/sp_2021/dd_2021.csv",
  description = "A generated representation of Manchester's population characteristics, risks and outcomes (synthetic population).",
  citation = "?",
  variables = list(
    hhID = "household id",
    zone = "Output Area",
    type = "Dwelling type ((SFD: single-family detached, SFA: single-family attached, MF234: building with 2 to 4 units, MF5plus: building with 5 or more units)",
    bedrooms = "Number of bedrooms",
    quality = "Dwelling quality (1 to 4, being 1 top quality)",
    monthlyCost = "Rent (£/month)",
    yearBuilt = "Construction year",
    floor = "Floor area (m²)"
  )
)
```

### Jobs
```{r}
data$Manchester$population[["jobs"]] <- list(
  source = "manchester/synpop/sp_2021/jj_2021.csv",
  description = "A generated representation of Greater Manchester's employment characteristics, risks and outcomes (synthetic population).",
  citation = "?",
  variables = list(
    id = "job id",
    zone = "Output Area",
    personId = "person id",
    type = "job type by industry"
  )
)
```


## Read in data
### population
```{r}
synpop <- list()
for (key in names(data$Manchester$population)) {
  synpop[[key]] <- read_csv(paste0("../../../",data$Manchester$population[[key]]$source))
}
```


### Check population data
Household and dwelling ID appear identical, but we will confirm that they share the same values and order and are therefore interchangeable (and one is redundant and may be discarded!).
```{r}
#| output: true
stopifnot(identical(synpop$households$id, synpop$households$dwelling))
```

This is true for the households data that household id and dwelling id variables are identical.

The following code fails (informatively), so I have commented it out --- interpretation follows.
```{r}
#| output: true
# stopifnot(identical(synpop$dwellings$id, synpop$dwellings$hhID))
```

Its not true for the dwellings data that dwelling id and household id variables are identical... which makes things a bit awkward, as it implies that linkage of one or the other may have an error.

So let's look deeper -- here is demonstration that household id and dwelling id are identical for households data:
```{r}
#| output: true
synpop$households[c("id","dwelling")] %>% summary()
```

Here is demonstration of how they differ within the dwellings data:
```{r}
#| output: true
synpop$dwellings[c("id","hhID")] %>% summary()
```

So... the hhID variable approimately mathces the distribution seen in the households dataset and may be able to link dwellings to the households dataset (on either the id, or dwelling variables).  Best to not use the dwelling ID at all, however will check this with the team, to be sure the right variables are used here and elsewhere.

The person ID variable `id` should be renamed to avoid ambiguity when merging with jobs on person ID (`personId`).
```{r}
#| output: true
synpop$persons <- synpop$persons %>% rename(personId = id)
names(synpop$persons)
```

We should now be ready to join datasets

### Join population data
```{r}
synpop[["merged"]] <- synpop$dwelling %>%
   left_join(synpop$households, by = c("hhID" = "id")) %>%
   right_join(synpop$persons, by = c("hhID" = "hhid")) %>%
   left_join(synpop$jobs, by = "personId")
```

Display a summary of the merged data
```{r}
#| output: true
synpop$merged %>% summary()
```

Confirm that the zone variable from households and dwellings are identical, as an extra check that this merge has worked as intended
```{r}
stopifnot(identical(synpop$merged$zone.x,synpop$merged$zone.y))
```

While this has merged, I will need to check w/ team to confirm that hhId is the correct variable to match dwellings.